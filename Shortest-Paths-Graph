#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

typedef struct {
    int target;
    int *weights;
} Edge;

typedef struct {
    int vertex;
    int distance;
} MinHeapNode;

typedef struct {
    int size;
    int capacity;
    int *pos;
    MinHeapNode **array;
} MinHeap;

MinHeapNode* newMinHeapNode(int v, int dist) {
    MinHeapNode* minHeapNode = (MinHeapNode*) malloc(sizeof(MinHeapNode));
    minHeapNode->vertex = v;
    minHeapNode->distance = dist;
    return minHeapNode;
}

MinHeap* createMinHeap(int capacity) {
    MinHeap* minHeap = (MinHeap*) malloc(sizeof(MinHeap));
    minHeap->pos = (int*) malloc(capacity * sizeof(int));
    minHeap->size = 0;
    minHeap->capacity = capacity;
    minHeap->array = (MinHeapNode**) malloc(capacity * sizeof(MinHeapNode*));
    return minHeap;
}

void swapMinHeapNode(MinHeapNode** a, MinHeapNode** b) {
    MinHeapNode* t = *a;
    *a = *b;
    *b = t;
}

void minHeapify(MinHeap* minHeap, int idx) {
    int smallest, left, right;
    smallest = idx;
    left = 2 * idx + 1;
    right = 2 * idx + 2;

    if (left < minHeap->size &&
        minHeap->array[left]->distance < minHeap->array[smallest]->distance)
        smallest = left;

    if (right < minHeap->size &&
        minHeap->array[right]->distance < minHeap->array[smallest]->distance)
        smallest = right;

    if (smallest != idx) {
        MinHeapNode* smallestNode = minHeap->array[smallest];
        MinHeapNode* idxNode = minHeap->array[idx];

        minHeap->pos[smallestNode->vertex] = idx;
        minHeap->pos[idxNode->vertex] = smallest;

        swapMinHeapNode(&minHeap->array[smallest], &minHeap->array[idx]);

        minHeapify(minHeap, smallest);
    }
}

int isEmpty(MinHeap* minHeap) {
    return minHeap->size == 0;
}

MinHeapNode* extractMin(MinHeap* minHeap) {
    if (isEmpty(minHeap))
        return NULL;

    MinHeapNode* root = minHeap->array[0];
    MinHeapNode* lastNode = minHeap->array[minHeap->size - 1];
    minHeap->array[0] = lastNode;

    minHeap->pos[root->vertex] = minHeap->size - 1;
    minHeap->pos[lastNode->vertex] = 0;

    --minHeap->size;
    minHeapify(minHeap, 0);

    return root;
}

void decreaseKey(MinHeap* minHeap, int v, int dist) {
    int i = minHeap->pos[v];
    minHeap->array[i]->distance = dist;

    while (i && minHeap->array[i]->distance < minHeap->array[(i - 1) / 2]->distance) {
        minHeap->pos[minHeap->array[i]->vertex] = (i - 1) / 2;
        minHeap->pos[minHeap->array[(i - 1) / 2]->vertex] = i;
        swapMinHeapNode(&minHeap->array[i], &minHeap->array[(i - 1) / 2]);

        i = (i - 1) / 2;
    }
}

int isInMinHeap(MinHeap* minHeap, int v) {
    if (minHeap->pos[v] < minHeap->size)
        return 1;
    return 0;
}

void dijkstra(Edge** graph, int V, int N, int src, int dest) {
    int* dist = (int*) malloc(V * sizeof(int));
    int* parent = (int*) malloc(V * sizeof(int));
    MinHeap* minHeap = createMinHeap(V);

    for (int v = 0; v < V; ++v) {
        dist[v] = INT_MAX;
        minHeap->array[v] = newMinHeapNode(v, dist[v]);
        minHeap->pos[v] = v;
    }

    minHeap->array[src] = newMinHeapNode(src, dist[src]);
    minHeap->pos[src] = src;
    dist[src] = 0;
    decreaseKey(minHeap, src, dist[src]);
    minHeap->size = V;

    while (!isEmpty(minHeap)) {
        MinHeapNode* minHeapNode = extractMin(minHeap);
        int u = minHeapNode->vertex;
        free(minHeapNode);

        if (u == dest) break;

        for (int i = 0; i < V; ++i) {
            if (graph[u][i].weights) {
                int v = i;
                int weight = graph[u][i].weights[dist[u] % N];
                if (isInMinHeap(minHeap, v) && dist[u] != INT_MAX && dist[u] + weight < dist[v]) {
                    dist[v] = dist[u] + weight;
                    parent[v] = u;
                    decreaseKey(minHeap, v, dist[v]);
                }
            }
        }
    }

    if (dist[dest] == INT_MAX) {
        printf("No path from %d to %d\n", src, dest);
    } else {
        printf("Shortest path from %d to %d: ", src, dest);
        int v = dest;
        while (v != src) {
            printf("%d <- ", v);
            v = parent[v];
        }
        printf("%d\nTotal weight: %d\n", src, dist[dest]);
    }

    free(dist);
    free(parent);
    free(minHeap->pos);
    free(minHeap->array);
    free(minHeap);
}

void readGraph(const char* filename, int* V, int* N, Edge*** graph) {
    FILE* file = fopen(filename, "r");
    if (!file) {
        fprintf(stderr, "Error opening file\n");
        exit(EXIT_FAILURE);
    }

    fscanf(file, "%d %d", V, N);
    *graph = (Edge**) malloc(*V * sizeof(Edge*));
    for (int i = 0; i < *V; ++i) {
        (*graph)[i] = (Edge*) calloc(*V, sizeof(Edge));
    }

    int vs, vt;
    while (fscanf(file, "%d %d", &vs, &vt) != EOF) {
        (*graph)[vs][vt].weights = (int*) malloc(*N * sizeof(int));
        for (int i = 0; i < *N; ++i) {
            fscanf(file, "%d", &(*graph)[vs][vt].weights[i]);
        }
    }

    fclose(file);
}

void freeGraph(Edge** graph, int V) {
    for (int i = 0; i < V; ++i) {
        for (int j = 0; j < V; ++j) {
            free(graph[i][j].weights);
        }
        free(graph[i]);
    }
    free(graph);
}

int main(int argc, char* argv[]) {
    if (argc < 2) {
        fprintf(stderr, "Usage: %s <graph file>\n", argv[0]);
        return EXIT_FAILURE;
    }

    int V, N;
    Edge** graph;
    readGraph(argv[1], &V, &N, &graph);

    int src, dest;
    while (printf("Enter query (src dest): "), scanf("%d %d", &src, &dest) != EOF) {
        dijkstra(graph, V, N, src, dest);
    }

    freeGraph(graph, V);
    return EXIT_SUCCESS;
}
